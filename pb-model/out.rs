fn main_graph(onnx__Gemm_0: [[f32; 5usize]; 1usize]) {
    const encoder_encoder_net_mlp_0_weight: [[f32; 5usize]; 32usize] = [
        [0.36418626f32, 0.38868424f32, -0.1663047f32, 0.3725797f32, -0.3863111f32],
        [-0.08340243f32, 0.20498663f32, -0.06508442f32, -0.19801809f32, -0.0710792f32],
        [-0.3663367f32, 0.099851154f32, -0.32911155f32, 0.7089239f32, 0.5867368f32],
        [-0.055186212f32, -0.3706689f32, -0.145885f32, 0.18491097f32, -0.5297431f32],
        [0.24877208f32, -0.14411984f32, -0.08195f32, 0.44902688f32, -0.039540976f32],
        [0.096399404f32, 0.09990374f32, 0.037548162f32, 0.59009033f32, -0.2941373f32],
        [-0.2252989f32, 0.09832231f32, 0.42021683f32, 0.33356833f32, 0.00040450713f32],
        [0.16777919f32, -0.020056214f32, 0.15085201f32, -0.21391262f32, -0.87609446f32],
        [
            -0.17949107f32,
            0.031013163f32,
            -0.0013136722f32,
            0.24318407f32,
            -0.19271813f32,
        ],
        [0.18431132f32, 0.2959712f32, 0.04847192f32, -0.34432593f32, -0.40148622f32],
        [-0.13623537f32, -0.42723408f32, -0.5189295f32, -0.42346987f32, 0.28312248f32],
        [-0.20833439f32, -0.06503798f32, 0.40925798f32, -0.39871654f32, -0.3860325f32],
        [0.27535236f32, -0.2901121f32, -0.06866963f32, 0.12776937f32, -0.16967042f32],
        [0.03204269f32, 0.213645f32, -0.036073655f32, -0.12309547f32, -0.4058232f32],
        [0.12289204f32, 0.031369522f32, -0.2257382f32, 0.29533276f32, -0.4515701f32],
        [-0.38358042f32, -0.18310048f32, 0.29194245f32, 0.25229245f32, -0.19506054f32],
        [0.29016125f32, 0.22580285f32, 0.13212152f32, -0.57959944f32, -0.16815667f32],
        [-0.011089489f32, -0.23703334f32, 0.02399714f32, -0.29076415f32, 0.41708463f32],
        [-0.19940138f32, 0.18316239f32, 0.122111544f32, 0.33261278f32, -0.019316418f32],
        [0.037940558f32, 0.3434028f32, -0.0805326f32, -0.35019886f32, -0.27195528f32],
        [0.0064946143f32, 0.2435844f32, -0.37696284f32, 0.2826761f32, 0.107980244f32],
        [-0.27976495f32, 0.21101159f32, -0.078009784f32, -0.2610174f32, -0.28959802f32],
        [-0.23968561f32, 0.32235232f32, -0.1673773f32, -0.43509147f32, 0.22975913f32],
        [-0.26615036f32, -0.33615676f32, 0.38432196f32, -0.411968f32, 0.11621376f32],
        [0.16826978f32, -0.035262246f32, -0.22176367f32, -0.1695317f32, -0.6799471f32],
        [0.261011f32, 0.3409009f32, 0.43308103f32, -0.09691654f32, 0.09940257f32],
        [-0.19505556f32, -0.20418683f32, -0.046809915f32, 0.4888724f32, 0.22585686f32],
        [0.07692904f32, -0.18383637f32, -0.22934127f32, -0.114277996f32, -0.34099528f32],
        [0.33595857f32, 0.28125253f32, -0.34452376f32, -0.0012918365f32, -0.48370337f32],
        [-0.349944f32, 0.033830386f32, 0.07007776f32, 0.19780493f32, -0.015907815f32],
        [0.17308408f32, 0.25437626f32, 0.23482595f32, -0.25457194f32, 0.102612875f32],
        [0.15037647f32, -0.5431067f32, -0.025818916f32, 0.4915055f32, 0.3411872f32],
    ];
    const encoder_encoder_net_mlp_0_bias: [f32; 32usize] = [
        -0.63521135f32,
        0.5969157f32,
        0.4528101f32,
        -0.0035443413f32,
        -0.04092593f32,
        0.36480042f32,
        -0.20455313f32,
        0.008290023f32,
        -0.2588688f32,
        -0.671864f32,
        -0.09522714f32,
        -0.59094405f32,
        -0.53549707f32,
        -0.5122429f32,
        -0.19101223f32,
        -0.43724227f32,
        -0.5706205f32,
        0.49223128f32,
        -0.31078222f32,
        -0.6634434f32,
        0.19407111f32,
        0.24683109f32,
        -0.52139556f32,
        -0.31460544f32,
        -0.06868959f32,
        0.020813493f32,
        -0.7620825f32,
        0.21444471f32,
        0.21807456f32,
        -0.4185136f32,
        0.4587256f32,
        0.6652046f32,
    ];
    const pi_net_mlp_0_weight: [[f32; 32usize]; 4usize] = [
        [
            0.104623884f32,
            -0.12665823f32,
            0.2138009f32,
            -0.013077618f32,
            0.18319196f32,
            0.2867461f32,
            -0.107546374f32,
            -0.19913957f32,
            -0.06411746f32,
            -0.21906f32,
            0.040177833f32,
            -0.121317305f32,
            -0.0030001714f32,
            -0.057175003f32,
            0.16184802f32,
            0.16899192f32,
            -0.11412098f32,
            -0.16196644f32,
            0.11878019f32,
            0.07141523f32,
            0.0012257011f32,
            -0.16121137f32,
            -0.23866913f32,
            -0.007226641f32,
            0.11982215f32,
            0.03604025f32,
            0.071527995f32,
            -0.08048857f32,
            -0.14333919f32,
            0.050423402f32,
            -0.24162903f32,
            -0.060125943f32,
        ],
        [
            -0.16580556f32,
            0.1260804f32,
            0.005579143f32,
            -0.11977343f32,
            -0.107972264f32,
            -0.26008448f32,
            -0.048214816f32,
            -0.20614381f32,
            -0.19899626f32,
            -0.023339534f32,
            0.2902627f32,
            -0.00556204f32,
            -0.04955008f32,
            0.027415616f32,
            0.060052253f32,
            -0.18705755f32,
            -0.023103159f32,
            0.1751929f32,
            0.050878238f32,
            0.100972004f32,
            0.13944584f32,
            0.0557308f32,
            0.26844993f32,
            -0.023207333f32,
            -0.04668565f32,
            0.16536854f32,
            -0.09842752f32,
            -0.08053094f32,
            -0.18034641f32,
            -0.079774044f32,
            0.12955867f32,
            -0.06392964f32,
        ],
        [
            0.40558422f32,
            -0.038331065f32,
            -0.16621028f32,
            -0.063225105f32,
            -0.019077294f32,
            0.14290798f32,
            -0.040485278f32,
            0.47228226f32,
            0.34227943f32,
            0.57490546f32,
            0.12786238f32,
            -0.025134694f32,
            0.07068202f32,
            0.28099743f32,
            0.037248556f32,
            0.13514444f32,
            0.30368248f32,
            -0.3030952f32,
            -0.19290543f32,
            0.26123f32,
            -0.035147246f32,
            -0.079053715f32,
            -0.037476774f32,
            -0.24580951f32,
            0.20472918f32,
            -0.16013518f32,
            0.1054591f32,
            0.11645695f32,
            0.45337108f32,
            -0.10834238f32,
            -0.15659353f32,
            -0.20821704f32,
        ],
        [
            0.13266967f32,
            0.033805776f32,
            -0.33559373f32,
            0.02575972f32,
            -0.3534877f32,
            -0.2663953f32,
            -0.14996399f32,
            0.5636612f32,
            -0.05705447f32,
            0.5991138f32,
            0.21554355f32,
            0.08386472f32,
            0.010876276f32,
            0.4842335f32,
            0.1655531f32,
            0.13847324f32,
            0.54061824f32,
            -0.31591916f32,
            -0.15943919f32,
            0.5887004f32,
            -0.4237653f32,
            0.57075584f32,
            0.1718936f32,
            0.27535018f32,
            0.47916117f32,
            -0.10614864f32,
            -0.39507684f32,
            0.29996744f32,
            0.27579537f32,
            0.062097903f32,
            -0.1876476f32,
            -0.5297832f32,
        ],
    ];
    const pi_net_mlp_0_bias: [f32; 4usize] = [
        0.11671197f32,
        -0.054607216f32,
        -0.303966f32,
        -0.48877242f32,
    ];
    const onnx__Max_34: [f32; 1usize] = [-20f32];
    const onnx__Min_35: [f32; 1usize] = [20f32];
    fn _encoder_encoder_net_mlp_mlp_0_Gemm(
        onnx__Gemm_0: [[f32; 5usize]; 1usize],
    ) -> ([[f32; 32usize]; 1usize]) {}
    fn _encoder_encoder_net_mlp_mlp_1_Tanh(
        _encoder_encoder_net_mlp_mlp_0_Gemm_output_0: [[f32; 32usize]; 1usize],
    ) -> ([[f32; 32usize]; 1usize]) {}
    fn _pi_net_mlp_mlp_0_Gemm(
        _encoder_encoder_net_mlp_mlp_1_Tanh_output_0: [[f32; 32usize]; 1usize],
    ) -> ([[f32; 4usize]; 1usize]) {}
    fn _pi_Shape(
        _pi_net_mlp_mlp_0_Gemm_output_0: [[f32; 4usize]; 1usize],
    ) -> ([i64; 1usize]) {}
}
