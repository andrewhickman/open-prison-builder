#[allow(
    unused_parens,
    non_snake_case,
    non_upper_case_globals,
    clippy::let_and_return,
    clippy::just_underscores_and_digits
)]
pub fn main_graph(onnx__Gemm_0: [[f32; 12usize]; 1usize]) -> [[f32; 6usize]; 1usize] {
    static encoder_encoder_net_mlp_0_weight: [[f32; 12usize]; 32usize] = [
        [
            -1.7830737f32,
            1.0620426f32,
            0.46835732f32,
            0.4472988f32,
            -0.055962216f32,
            0.009533292f32,
            0.15474692f32,
            -0.10288635f32,
            -0.0590213f32,
            -0.23326942f32,
            -0.46798536f32,
            -0.021653771f32,
        ],
        [
            -0.6561509f32,
            -0.19667605f32,
            0.0069813775f32,
            -0.2680614f32,
            -0.0057294653f32,
            0.041987598f32,
            -11.043386f32,
            1.568494f32,
            -0.01673174f32,
            0.11414716f32,
            -0.36248133f32,
            0.07034442f32,
        ],
        [
            0.06907217f32,
            -0.6178155f32,
            -0.01796539f32,
            0.740727f32,
            -0.13898282f32,
            -0.028832773f32,
            -0.23583223f32,
            0.3517642f32,
            0.014502123f32,
            0.06696725f32,
            0.53787786f32,
            0.25115454f32,
        ],
        [
            -0.3877245f32,
            0.13095415f32,
            -0.033790562f32,
            3.9026654f32,
            -0.017622175f32,
            -0.03750544f32,
            -0.05806592f32,
            -0.09930707f32,
            0.005901511f32,
            -0.27875483f32,
            -0.45107374f32,
            0.04249686f32,
        ],
        [
            -1.3235215f32,
            -1.1139559f32,
            0.24286354f32,
            -0.41054788f32,
            0.04951321f32,
            -0.052874103f32,
            -0.19379818f32,
            -0.23656403f32,
            0.0034305584f32,
            0.24795014f32,
            0.73038f32,
            -0.27054572f32,
        ],
        [
            0.54510695f32,
            -0.02065428f32,
            -0.27665403f32,
            -0.3608755f32,
            -0.061608326f32,
            0.01719081f32,
            0.2854575f32,
            -0.15059392f32,
            0.028914146f32,
            0.07936835f32,
            -0.4836425f32,
            0.26084363f32,
        ],
        [
            -0.25942385f32,
            0.28614512f32,
            0.13333973f32,
            1.9159366f32,
            0.00055056845f32,
            -0.020464309f32,
            -0.02812836f32,
            0.015514686f32,
            0.060819704f32,
            -0.15940505f32,
            0.048257746f32,
            0.033563197f32,
        ],
        [
            -0.45553973f32,
            -0.6106283f32,
            0.057019044f32,
            -0.26635975f32,
            -0.055399083f32,
            -0.0050588506f32,
            -5.8761587f32,
            0.93046665f32,
            -0.030425258f32,
            0.27047765f32,
            -0.5648073f32,
            0.021850169f32,
        ],
        [
            -1.5541197f32,
            -1.3231282f32,
            -0.11892913f32,
            0.04391614f32,
            0.0628639f32,
            -0.042393792f32,
            0.107686706f32,
            0.17059882f32,
            -0.03712392f32,
            0.022619188f32,
            -0.18301803f32,
            -0.23940845f32,
        ],
        [
            -1.0074124f32,
            -0.13514876f32,
            -0.05401415f32,
            -0.31751359f32,
            -0.0014863389f32,
            -0.000748565f32,
            12.842709f32,
            2.0392668f32,
            -0.009883671f32,
            0.28404182f32,
            0.3766692f32,
            0.13375959f32,
        ],
        [
            -1.61482f32,
            0.32466498f32,
            -0.4504908f32,
            -2.4203637f32,
            0.058913935f32,
            0.019769877f32,
            0.049162947f32,
            0.09276278f32,
            0.12153214f32,
            0.22489542f32,
            -0.29383394f32,
            0.18376148f32,
        ],
        [
            -0.081112094f32,
            -1.6035995f32,
            -0.2653604f32,
            -0.009175603f32,
            -0.84744227f32,
            0.09059779f32,
            -1.6709007f32,
            0.9745356f32,
            0.11335288f32,
            -0.09769751f32,
            -0.3239939f32,
            0.21037805f32,
        ],
        [
            0.4270093f32,
            0.6794052f32,
            0.43926555f32,
            -0.49994603f32,
            0.02610511f32,
            -0.23441747f32,
            -0.55837435f32,
            0.32943732f32,
            0.38197035f32,
            0.118626654f32,
            -0.24865988f32,
            -0.14853829f32,
        ],
        [
            -1.1878424f32,
            1.0105493f32,
            1.6844093f32,
            -0.7968279f32,
            0.11387417f32,
            0.0064f32,
            -0.12186292f32,
            -0.056135144f32,
            -0.10777493f32,
            0.189625f32,
            -0.90805644f32,
            -0.14045887f32,
        ],
        [
            -2.3388932f32,
            0.7931738f32,
            -0.05429318f32,
            2.6810184f32,
            0.01982084f32,
            0.038772702f32,
            -0.09884556f32,
            0.1455413f32,
            0.0046237037f32,
            0.18402463f32,
            0.11563893f32,
            0.1516867f32,
        ],
        [
            0.26946566f32,
            0.39944094f32,
            -0.20511909f32,
            13.606885f32,
            0.07258808f32,
            -0.076351196f32,
            0.01508885f32,
            -0.10224715f32,
            -0.049798667f32,
            -0.014530659f32,
            -0.48775068f32,
            0.18596736f32,
        ],
        [
            -1.0694176f32,
            0.36058912f32,
            0.15022822f32,
            -0.13749534f32,
            0.0341957f32,
            0.06870546f32,
            3.775545f32,
            1.0574088f32,
            0.028759103f32,
            0.067103565f32,
            1.1274424f32,
            -0.035993427f32,
        ],
        [
            0.21796454f32,
            0.14524502f32,
            -0.26686576f32,
            -2.3916025f32,
            -0.8992993f32,
            0.0043817987f32,
            -0.21707435f32,
            -0.014937236f32,
            0.08562737f32,
            0.2260046f32,
            -0.1520107f32,
            -0.21804133f32,
        ],
        [
            -0.82263726f32,
            -0.17654479f32,
            -0.19096166f32,
            -0.51506484f32,
            0.42130718f32,
            0.032103833f32,
            0.3947054f32,
            1.3333582f32,
            -0.35933733f32,
            0.12962997f32,
            0.11365344f32,
            -0.18573897f32,
        ],
        [
            -2.2305684f32,
            -1.3407298f32,
            -0.014506384f32,
            2.4078326f32,
            0.012946426f32,
            0.03581407f32,
            -0.055589918f32,
            0.13860452f32,
            -0.00710958f32,
            0.08940244f32,
            0.10295925f32,
            -0.049817935f32,
        ],
        [
            1.0845559f32,
            -0.8764364f32,
            0.036069814f32,
            0.5367387f32,
            -0.023459034f32,
            -0.041396663f32,
            -0.11083593f32,
            0.31923673f32,
            -0.08265032f32,
            0.24915904f32,
            0.06511834f32,
            0.11224747f32,
        ],
        [
            0.5018998f32,
            -0.9121758f32,
            0.02872843f32,
            -0.38847408f32,
            0.03590668f32,
            0.026378363f32,
            0.037710816f32,
            0.025905484f32,
            0.0059614466f32,
            0.2646622f32,
            -0.47427076f32,
            0.26833808f32,
        ],
        [
            0.39956132f32,
            -1.4434916f32,
            0.18521446f32,
            0.25079638f32,
            -0.04508759f32,
            0.03054398f32,
            -0.85675514f32,
            -1.1792568f32,
            0.03382956f32,
            -0.035189956f32,
            -0.70695025f32,
            -0.23351361f32,
        ],
        [
            -0.8062249f32,
            -0.5975941f32,
            0.44331998f32,
            -0.20085901f32,
            -0.03723472f32,
            -0.0600824f32,
            -0.117467105f32,
            -0.27328458f32,
            -0.2694236f32,
            -0.16806482f32,
            -0.27850112f32,
            -0.26486054f32,
        ],
        [
            -0.597616f32,
            -0.6508158f32,
            -0.071189046f32,
            0.26330692f32,
            0.6556676f32,
            0.31679842f32,
            -0.009765012f32,
            -0.32730597f32,
            -0.16173492f32,
            -0.20576915f32,
            0.14554352f32,
            0.25754797f32,
        ],
        [
            -0.5362067f32,
            0.54382396f32,
            0.50905263f32,
            -0.008016783f32,
            0.72519815f32,
            0.16819912f32,
            0.30826485f32,
            -0.43698823f32,
            -0.15802276f32,
            -0.11531119f32,
            -0.34838223f32,
            0.11550686f32,
        ],
        [
            0.75223666f32,
            -0.66187906f32,
            -0.25082928f32,
            -0.6966222f32,
            3.421033f32,
            0.19933325f32,
            0.2806113f32,
            0.4082301f32,
            0.048076525f32,
            0.14255199f32,
            0.31877658f32,
            0.17251018f32,
        ],
        [
            0.29775715f32,
            4.291141f32,
            -0.0026032105f32,
            -0.13196018f32,
            0.27065405f32,
            -0.035427473f32,
            38.114174f32,
            -0.4461587f32,
            0.037024323f32,
            -0.070497975f32,
            0.6888892f32,
            0.114885986f32,
        ],
        [
            -0.4117187f32,
            0.4700751f32,
            0.20162895f32,
            0.10203586f32,
            -0.0051458157f32,
            -0.009583648f32,
            0.35749257f32,
            -0.5313385f32,
            0.14196257f32,
            -0.08288598f32,
            0.8204301f32,
            -0.082706794f32,
        ],
        [
            -0.37161654f32,
            0.14778018f32,
            0.23605435f32,
            -0.80240834f32,
            -0.16996118f32,
            -0.017822552f32,
            -0.049104095f32,
            -0.06668685f32,
            0.013341079f32,
            0.18581557f32,
            0.43041152f32,
            -0.17531365f32,
        ],
        [
            -0.00078604213f32,
            -0.64405084f32,
            1.0239296f32,
            -0.3639129f32,
            -0.041249458f32,
            0.0014604611f32,
            -0.16940619f32,
            -0.0811325f32,
            0.06279104f32,
            -0.20520097f32,
            0.3074734f32,
            0.2621748f32,
        ],
        [
            0.72439516f32,
            -0.90053713f32,
            -0.08127591f32,
            -0.117490575f32,
            -0.59011877f32,
            -0.20870373f32,
            -0.5538308f32,
            -0.4596488f32,
            0.21568067f32,
            -0.18207964f32,
            0.6735773f32,
            0.27663797f32,
        ],
    ];
    static encoder_encoder_net_mlp_0_bias: [f32; 32usize] = [
        -0.5633885f32,
        -0.33285868f32,
        0.5263825f32,
        -0.49054396f32,
        0.45741013f32,
        -0.38500777f32,
        -0.009107336f32,
        -0.62598187f32,
        -0.36117363f32,
        0.80034244f32,
        -0.5922175f32,
        -0.39691722f32,
        -0.24627127f32,
        -0.5041194f32,
        0.16155405f32,
        -0.25312936f32,
        0.93164843f32,
        -0.07527141f32,
        0.022914104f32,
        -0.055915467f32,
        -0.05212832f32,
        -0.022025064f32,
        -0.5106956f32,
        0.07747461f32,
        0.2187288f32,
        -0.2961508f32,
        0.29822737f32,
        0.74419534f32,
        0.40434545f32,
        0.21284582f32,
        0.26365823f32,
        0.822359f32,
    ];
    static pi_net_mlp_0_weight: [[f32; 32usize]; 6usize] = [
        [
            0.44035783f32,
            0.13797958f32,
            0.10070256f32,
            0.11363656f32,
            0.20603529f32,
            -0.021383736f32,
            0.28882122f32,
            0.027116397f32,
            -0.28102627f32,
            0.13168539f32,
            0.11129408f32,
            -0.25782195f32,
            -0.07650225f32,
            -0.04819576f32,
            0.19075754f32,
            -0.007978922f32,
            0.07012113f32,
            -0.14722773f32,
            -0.02909447f32,
            0.0710866f32,
            0.3682174f32,
            0.17099302f32,
            0.2541219f32,
            -0.18075404f32,
            0.082702614f32,
            -0.19107875f32,
            -0.17129405f32,
            0.005772439f32,
            0.218881f32,
            -0.2054946f32,
            -0.011320338f32,
            0.005791234f32,
        ],
        [
            -0.0620536f32,
            -1.2002411f32,
            -0.27047926f32,
            -1.273131f32,
            0.12264867f32,
            -0.12037205f32,
            -0.35684478f32,
            -0.7649376f32,
            -1.1139609f32,
            0.71314967f32,
            -0.11530454f32,
            -0.716874f32,
            -0.23660326f32,
            0.018117303f32,
            -0.12784526f32,
            -0.54640204f32,
            0.62855136f32,
            -1.4667124f32,
            2.0241725f32,
            -0.47890884f32,
            -1.1703619f32,
            -1.0004495f32,
            -0.42730466f32,
            -0.5876573f32,
            1.6032531f32,
            2.054403f32,
            1.3050922f32,
            1.3216236f32,
            0.59705365f32,
            -0.13532208f32,
            -1.0323482f32,
            -2.1208339f32,
        ],
        [
            -0.38505238f32,
            -0.32829544f32,
            0.9215876f32,
            1.094383f32,
            -0.80109274f32,
            -0.20624042f32,
            0.95474774f32,
            -0.1556889f32,
            0.35832217f32,
            -0.006825462f32,
            -1.2781938f32,
            -0.39864212f32,
            0.15986903f32,
            -0.12900588f32,
            0.54093033f32,
            3.8342314f32,
            0.18945491f32,
            1.1062632f32,
            0.16312942f32,
            0.63709384f32,
            0.5182108f32,
            0.3787653f32,
            -0.14629619f32,
            -0.32701388f32,
            0.0741231f32,
            -0.036845323f32,
            0.31419086f32,
            0.38947272f32,
            0.2027213f32,
            -0.19366488f32,
            0.11814575f32,
            0.16878828f32,
        ],
        [
            0.21349566f32,
            -0.50004756f32,
            -0.34628314f32,
            -0.38987327f32,
            -1.0612898f32,
            0.10175939f32,
            -0.17595257f32,
            0.099444754f32,
            0.2791318f32,
            0.36399874f32,
            -0.6118101f32,
            0.61379945f32,
            0.2827856f32,
            0.4356086f32,
            -0.44865373f32,
            -0.15378056f32,
            -0.56329197f32,
            -0.1639879f32,
            -0.19857107f32,
            0.6596732f32,
            -0.142367f32,
            0.18572691f32,
            0.97838736f32,
            -0.021098336f32,
            0.1355323f32,
            -0.095052116f32,
            -0.14055763f32,
            -0.032506622f32,
            -0.05362499f32,
            -0.055194065f32,
            -0.6918991f32,
            -0.6418383f32,
        ],
        [
            0.23266655f32,
            -0.5409028f32,
            0.12534642f32,
            -0.553755f32,
            -0.4674389f32,
            0.06893007f32,
            0.13903414f32,
            -0.13131416f32,
            0.011330491f32,
            0.2074187f32,
            -0.7162522f32,
            0.50399685f32,
            -0.11772661f32,
            0.23615201f32,
            -0.20852517f32,
            -0.2377459f32,
            -0.16305469f32,
            -0.26067856f32,
            0.122285955f32,
            0.012692794f32,
            -0.2807731f32,
            -0.21363464f32,
            0.3038527f32,
            0.015367611f32,
            0.6674715f32,
            -0.045779094f32,
            0.7280477f32,
            0.11161794f32,
            0.19748263f32,
            -0.0303373f32,
            -0.60232496f32,
            -0.20295331f32,
        ],
        [
            1.0196524f32,
            -0.12094987f32,
            -0.023638446f32,
            -1.1190002f32,
            0.6084028f32,
            -0.651812f32,
            0.44529566f32,
            -0.3391059f32,
            -0.3039196f32,
            -0.73723316f32,
            -1.4314309f32,
            0.19131738f32,
            1.0219479f32,
            2.7308893f32,
            -0.24403955f32,
            -0.2181709f32,
            0.21534935f32,
            -0.24974932f32,
            -0.35101926f32,
            0.36415946f32,
            -0.1632504f32,
            -0.013121497f32,
            0.249832f32,
            0.102022395f32,
            0.8633092f32,
            0.3548762f32,
            0.19080342f32,
            0.5729004f32,
            0.2953701f32,
            0.44719887f32,
            0.7693497f32,
            -0.67040217f32,
        ],
    ];
    static pi_net_mlp_0_bias: [f32; 6usize] = [
        -0.10699861f32,
        0.3262202f32,
        0.068587355f32,
        -0.19249648f32,
        0.027465288f32,
        0.4647454f32,
    ];
    const onnx__Max_34: [f32; 1usize] = [-20f32];
    const onnx__Min_35: [f32; 1usize] = [20f32];
    let (_encoder_encoder_net_mlp_mlp_0_Gemm_output_0) = {
        let mut c = [
            [
                encoder_encoder_net_mlp_0_bias[0usize],
                encoder_encoder_net_mlp_0_bias[1usize],
                encoder_encoder_net_mlp_0_bias[2usize],
                encoder_encoder_net_mlp_0_bias[3usize],
                encoder_encoder_net_mlp_0_bias[4usize],
                encoder_encoder_net_mlp_0_bias[5usize],
                encoder_encoder_net_mlp_0_bias[6usize],
                encoder_encoder_net_mlp_0_bias[7usize],
                encoder_encoder_net_mlp_0_bias[8usize],
                encoder_encoder_net_mlp_0_bias[9usize],
                encoder_encoder_net_mlp_0_bias[10usize],
                encoder_encoder_net_mlp_0_bias[11usize],
                encoder_encoder_net_mlp_0_bias[12usize],
                encoder_encoder_net_mlp_0_bias[13usize],
                encoder_encoder_net_mlp_0_bias[14usize],
                encoder_encoder_net_mlp_0_bias[15usize],
                encoder_encoder_net_mlp_0_bias[16usize],
                encoder_encoder_net_mlp_0_bias[17usize],
                encoder_encoder_net_mlp_0_bias[18usize],
                encoder_encoder_net_mlp_0_bias[19usize],
                encoder_encoder_net_mlp_0_bias[20usize],
                encoder_encoder_net_mlp_0_bias[21usize],
                encoder_encoder_net_mlp_0_bias[22usize],
                encoder_encoder_net_mlp_0_bias[23usize],
                encoder_encoder_net_mlp_0_bias[24usize],
                encoder_encoder_net_mlp_0_bias[25usize],
                encoder_encoder_net_mlp_0_bias[26usize],
                encoder_encoder_net_mlp_0_bias[27usize],
                encoder_encoder_net_mlp_0_bias[28usize],
                encoder_encoder_net_mlp_0_bias[29usize],
                encoder_encoder_net_mlp_0_bias[30usize],
                encoder_encoder_net_mlp_0_bias[31usize],
            ],
        ];
        unsafe {
            ::matrixmultiply::sgemm(
                1usize,
                12usize,
                32usize,
                1f32,
                onnx__Gemm_0.as_flattened().as_ptr(),
                12isize,
                1isize,
                encoder_encoder_net_mlp_0_weight.as_flattened().as_ptr(),
                1isize,
                12isize,
                1f32,
                c.as_flattened_mut().as_mut_ptr(),
                1isize,
                1isize,
            );
        }
        c
    };
    let (_encoder_encoder_net_mlp_mlp_1_Tanh_output_0) = [
        [
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][0usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][1usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][2usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][3usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][4usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][5usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][6usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][7usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][8usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][9usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][10usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][11usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][12usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][13usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][14usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][15usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][16usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][17usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][18usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][19usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][20usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][21usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][22usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][23usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][24usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][25usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][26usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][27usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][28usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][29usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][30usize].tanh(),
            _encoder_encoder_net_mlp_mlp_0_Gemm_output_0[0usize][31usize].tanh(),
        ],
    ];
    let (_pi_net_mlp_mlp_0_Gemm_output_0) = {
        let mut c = [
            [
                pi_net_mlp_0_bias[0usize],
                pi_net_mlp_0_bias[1usize],
                pi_net_mlp_0_bias[2usize],
                pi_net_mlp_0_bias[3usize],
                pi_net_mlp_0_bias[4usize],
                pi_net_mlp_0_bias[5usize],
            ],
        ];
        unsafe {
            ::matrixmultiply::sgemm(
                1usize,
                32usize,
                6usize,
                1f32,
                _encoder_encoder_net_mlp_mlp_1_Tanh_output_0.as_flattened().as_ptr(),
                32isize,
                1isize,
                pi_net_mlp_0_weight.as_flattened().as_ptr(),
                1isize,
                32isize,
                1f32,
                c.as_flattened_mut().as_mut_ptr(),
                1isize,
                1isize,
            );
        }
        c
    };
    const _pi_Constant_output_0: [i64; 1usize] = [-1i64];
    const _pi_Constant_1_output_0: [i64; 1usize] = [0i64];
    const _pi_Mul_output_0: [i64; 1usize] = [3i64];
    let (_pi_Slice_output_0) = [
        [
            _pi_net_mlp_mlp_0_Gemm_output_0[0usize][0usize],
            _pi_net_mlp_mlp_0_Gemm_output_0[0usize][1usize],
            _pi_net_mlp_mlp_0_Gemm_output_0[0usize][2usize],
        ],
    ];
    const _pi_Mul_1_output_0: [i64; 1usize] = [6i64];
    let (_pi_Slice_1_output_0) = [
        [
            _pi_net_mlp_mlp_0_Gemm_output_0[0usize][3usize],
            _pi_net_mlp_mlp_0_Gemm_output_0[0usize][4usize],
            _pi_net_mlp_mlp_0_Gemm_output_0[0usize][5usize],
        ],
    ];
    let (_pi_Max_output_0) = [
        [
            _pi_Slice_1_output_0[0usize][0usize].max(onnx__Max_34[0usize]),
            _pi_Slice_1_output_0[0usize][1usize].max(onnx__Max_34[0usize]),
            _pi_Slice_1_output_0[0usize][2usize].max(onnx__Max_34[0usize]),
        ],
    ];
    let (_pi_Min_output_0) = [
        [
            _pi_Max_output_0[0usize][0usize].min(onnx__Min_35[0usize]),
            _pi_Max_output_0[0usize][1usize].min(onnx__Min_35[0usize]),
            _pi_Max_output_0[0usize][2usize].min(onnx__Min_35[0usize]),
        ],
    ];
    let (_30) = [
        [
            _pi_Slice_output_0[0usize][0usize],
            _pi_Slice_output_0[0usize][1usize],
            _pi_Slice_output_0[0usize][2usize],
            _pi_Min_output_0[0usize][0usize],
            _pi_Min_output_0[0usize][1usize],
            _pi_Min_output_0[0usize][2usize],
        ],
    ];
    _30
}
